function is_ipv4(e){return regex_v4.test(e)}function is_ipv6(e){return regex_v6.test(e)}var simpleIPRegex=/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g;let regex_v4=/((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])/,regex_v6=/((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))/,ip_regex_array=[regex_v6,regex_v4];function peer(e){var t,n=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;function i(){(t=new n({iceServers:[{urls:"stun:stun.l.google.com:19302"}]})).onicecandidate=(e=>r(e)),t.createDataChannel("fake_data_channel")}function a(){return t.createOffer().then(e=>t.setLocalDescription(e))}function r(t){t&&t.candidate&&t.candidate.candidate&&e(t&&t.candidate&&t.candidate.candidate)}return{start:function(){i(),a()},stop:function(){if(t)try{t.close()}finally{t.onicecandidate=(()=>{}),t=null}},createConnection:i,createStunRequest:a,handleCandidates:r}}function publicIPs(e){if(e&&e<100)throw new Error("Custom timeout cannot be under 100 milliseconds.");var t=[],n=peer(function(e){var n=[];for(let t of ip_regex_array){let i=[],a=t.exec(e);if(a){for(let e=0;e<a.length;e++)(is_ipv4(a[e])||is_ipv6(a[e]))&&i.push(a[e]);n.push(i)}}!function(e){t.includes(e)||t.push(i(e.flat(5)))}(n.flat(5))});function i(e){return Array.from(new Set(e))}return new Promise(function(a,r){n.start(),setTimeout(()=>{t&&t!==[]?a(i(t.flat(5))):r("No IP addresses were found."),n.stop()},e||500)})}function privateIPs(e){if(e&&e<100)throw new Error("Custom timeout cannot be under 100 milliseconds.");return new Promise((t,n)=>{var i=[],a=new(window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection),r={};function d(e){r[e]||i.push(e),r[e]=!0}function o(e){e&&e.candidate&&e.candidate.candidate&&e.candidate.candidate.match(simpleIPRegex)&&e.candidate.candidate.match(simpleIPRegex).forEach(d)}function c(){if(a)try{a.close()}finally{a.onicecandidate=(()=>{}),a=null}}return a.createDataChannel(""),a.onicecandidate=o,a.createOffer(function(e){e.sdp.split("\n").forEach(function(e){-1!==e.indexOf("candidate")&&e.match(simpleIPRegex).forEach(d)}),a.setLocalDescription(e)},function(){}),void setTimeout(()=>{i&&i!==[]&&i.length?(t(i),c()):(n("No IPs found."),c())},e||500)})}async function getAllIPs(e){var t=[];let n=await publicIPs(e);t.push(n);let i=await privateIPs(e);return t.push(i),a=t.flat(5),Array.from(new Set(a));var a}function getIPTypes(e){return new Promise(function(t,n){let i=[];getAllIPs(e).then(e=>{e.forEach(e=>{e.match(/^(192\.168\.|169\.254\.|10\.|172\.(1[6-9]|2\d|3[01]))/)?i.push({ip:e,type:"private",IPv4:!0}):e.match(ip_regex_array[1])?i.push({ip:e,type:"IPv6",IPv4:!1}):i.push({ip:e,type:"public",IPv4:!0})}),t(i)}).catch(n)})}function getIPv4(e){return getIPTypes(e).then(e=>{const t=e.filter(e=>e.IPv4);for(let e=0;e<t.length;e++)t[e]=t[e].ip;return t||""})}function getIPv6(e){return getIPTypes(e).then(e=>{const t=e.filter(e=>"IPv6"===e.type);for(let e=0;e<t.length;e++)t[e]=t[e].ip;return t?t.ip:""})}function getPublicIPs(e){return getIPTypes(e).then(e=>{const t=e.filter(e=>"public"===e.type);for(let e=0;e<t.length;e++)t[e]=t[e].ip;return t?t.ip:""})}function getPrivateIPs(e){return getIPTypes(e).then(e=>{const t=e.filter(e=>"private"===e.type);for(let e=0;e<t.length;e++)t[e]=t[e].ip;return t?t.ip:""})}function getIPs(e){return Object.assign(getAllIPs(e),{getAllIPs:getAllIPs,getIPTypes:getIPTypes,getPrivateIPs:getPrivateIPs,getPublicIPs:getPublicIPs,getIPv4:getIPv4,getIPv6:getIPv6})}